<!DOCTYPE HTML>
<html>
<head>
  <title>{{ title }}</title>

  <style>
    body, html {
      font-family: arial, sans-serif;
      font-size: 11pt;
    }

    #visualization {
      box-sizing: border-box;
      width: 100%;
      height: 300px;
    }
  </style>

  <!-- note: moment.js must be loaded before vis-timeline-graph2d or the embedded version of moment.js is used -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>

  <script src="https://visjs.github.io/vis-timeline/standalone/umd/vis-timeline-graph2d.min.js"></script>
  <link href="https://visjs.github.io/vis-timeline/styles/vis-timeline-graph2d.min.css" rel="stylesheet" type="text/css" />
  
</head>
<body>
<p>
   {{ body }}
</p>
<div id="visualization"></div>

<script>

var groups = new vis.DataSet();

  var container = document.getElementById('visualization');
  var options = {
    groupOrder: 'id',  // groupOrder can be a property name or a sorting function
    maxHeight: 800,
    tooltip: {
      template: function(originalItemData, parsedItemData) {
        return `<span style="color:green">${originalItemData.raw}</span>`;
      }
    }
  };
  var items = new vis.DataSet();

{% for group in groups %}
   groups.add({id: {{ group["id"] }}, content: '{{ group["name"] }}'});
   {% for ev in group["events"] %}
     items.add({
       id: {{ ev["id"] }},
       group: {{ group["id"] }},
//       content: '{{ ev.content|tojson|truncate }}',
       content: '{{ ev.content }}',
       raw: '{{ ev.raw|tojson }}'.replace(/\n/g, "<br />"),
       start: "{{ ev["timestamp"] }}",
       type: 'box'
     });
   {% endfor %}
{% endfor %}

  var timeline = new vis.Timeline(container);
  timeline.setOptions(options);
  timeline.setGroups(groups);
  timeline.setItems(items);

//  var now = moment().minutes(0).seconds(0).milliseconds(0);
//  var groupCount = 3;
//  var itemCount = 20;
//
//  // create a data set with groups
//  var names = ['John', 'Alston', 'Lee', 'Grant'];
//  var groups = new vis.DataSet();
//  for (var g = 0; g < groupCount; g++) {
//    groups.add({id: g, content: names[g]});
//  }
//
//  // create a dataset with items
//  var items = new vis.DataSet();
//  for (var i = 0; i < itemCount; i++) {
//    var start = now.clone().add(Math.random() * 200, 'hours');
//    var group = Math.floor(Math.random() * groupCount);
//    items.add({
//      id: i,
//      group: group,
//      content: 'item ' + i +
//          ' <span style="color:#97B0F8;">(' + names[group] + ')</span>',
//      start: start,
//      type: 'box'
//    });
//  }
//
//  // create visualization
//  var container = document.getElementById('visualization');
//  var options = {
//    groupOrder: 'content'  // groupOrder can be a property name or a sorting function
//  };
//
//  var timeline = new vis.Timeline(container);
//  timeline.setOptions(options);
//  timeline.setGroups(groups);
//  timeline.setItems(items);

</script>
</body>
</html>
