<!DOCTYPE HTML>
<html>
<head>
  <title>{{ title }}</title>

  <style>
    body, html {
      font-family: arial, sans-serif;
      font-size: 11pt;
    }

    table {
      width: 100%;
    }

    #visualization {
      box-sizing: border-box;
      width: 100%;
    }

    .vis-item.green {
      background-color: greenyellow;
      border-color: green;
    }

    .vis-item.orange {
      background-color: gold;
      border-color: orange;
    }

    .vis-item.blue {
      background-color: deepskyblue;
      border-color: blue;
    }

    .vis-item.red {
      background-color: coral;
      border-color: orange;
    }

    #current_event {
      overflow: scroll;
      height: 150px;
      width: 0px;
      min-width: 99%;
      border: 1px solid black;
      padding: 5px;
    }

  </style>

  <!-- note: moment.js must be loaded before vis-timeline-graph2d or the embedded version of moment.js is used -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>

  <script src="https://visjs.github.io/vis-timeline/standalone/umd/vis-timeline-graph2d.min.js"></script>
  <link href="https://visjs.github.io/vis-timeline/styles/vis-timeline-graph2d.min.css" rel="stylesheet" type="text/css" />

  <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  <link href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet" type="text/css" />

</head>
<body>

<div>
<table>
<tr>
<td width="20%">
<h2>{{ title }}</h2>
<p>
   {{ body }}
</p>
<p>
<span>
<div>
	<label><input type="checkbox" id="stackEvents"> Do not stack events</input></label>
</div>
<div>
	<label><input type="checkbox" id="clusterCheckbox"> Enable clustering</input></label>
</div>
<div>
	<label><input type="checkbox" id="focus" checked> Focus on selection</input></label>
</div>
<div>
</br>
<span>Event filter: </span><input id="filterSaltEvents"></input>
</div>
</span>
</p>
</td>
<td width="80%">
<div style="margin-bottom: 5px;">
	<label><b>Selected Event: </b><span id="current_event_name"></span></label>
</div>
<span>
	<div id="current_event"></div>
</span>
</td>
</tr>
</table>
</div>
<div id="visualization"></div>
<script>

var groups = new vis.DataSet();

// Define height depending the current window
var timelineHeight = Math.round($(window).height() * 0.76) + 'px';

var container = document.getElementById('visualization');
var defaultOptions = {
    template: (itemData, element, data) => {
        if (data.isCluster) {
            return `<div>${data.items.length} items</div>`;
        } else {
            return `<div>${data.content}</div>`;
        }
    },
    stack: true,
    verticalScroll: true,
    orientation: {
        axis: "both",
        item: "bottom"
    },
    margin: {
        item: 10, // minimal margin between items
        axis: 5 // minimal margin between items and the axis
    },
    //zoomKey: 'ctrlKey',
    groupOrder: 'id', // groupOrder can be a property name or a sorting function
    height: timelineHeight,
    tooltip: {
        template: function(originalItemData, parsedItemData) {
	    $("#current_event_name").text(`${originalItemData.content}`);
	    $("#current_event").html(`<div style="style: bold; padding: 5px">${originalItemData.content}</div><span style="color:green; padding: 5px">${originalItemData.raw}</span>`);
            return `<span style="color:green">${originalItemData.raw}</span>`;
        }
    }
};
var items = new vis.DataSet();

{% for group in groups %}
groups.add({
    id: {{ group["id"] }},
    content: '{{ group["name"] }}'
});
{% for ev in group["events"] %}
items.add({
    id: {{ ev["id"] }},
    group: {{ group["id"] }},
    content: '{{ ev.content }}',
    raw: '{{ ev.raw|tojson }}'.replace(/\n/g, "<br />"),
    start: '{{ ev["timestamp"] }}',
    type: 'box',
    className: '{{ ev["color"] }}'
});
{% endfor %}
{% endfor %}

var timeline = new vis.Timeline(container);
timeline.setOptions(defaultOptions);
timeline.setGroups(groups);
timeline.setItems(items);

$('#clusterCheckbox').change(function() {
    var options = {};
    if (this.checked) {
        var clusterOpts = {
            cluster: {
                titleTemplate: "{count} events.",
                showStipes: true,
            }
        };
        Object.assign(options, defaultOptions, clusterOpts);
    } else {
        Object.assign(options, defaultOptions);
    }
    timeline.setOptions(options);
});

$('#stackEvents').change(function() {
    var options = {};
    if (this.checked) {
        var stackOpts = {
            stack: false
        };
        Object.assign(options, defaultOptions, stackOpts);
    } else {
        Object.assign(options, defaultOptions);
    }
    timeline.setOptions(options);
});

$('#filterSaltEvents').change(function() {
    var filteredItems = items.get({
        filter: function(item) {
            return item.content.includes($('#filterSaltEvents').val()) || item.raw.includes($('#filterSaltEvents').val());
        }
    });
    timeline.setItems(filteredItems);
    timeline.redraw();
});

var selectedItem = 0;

timeline.on('select', function(properties) {
    selectedItem = properties.items;
});

document.onkeydown = function(event) {
    switch (event.keyCode) {
        case 37:
            if (selectedItem >= 0) {
                selectedItem--;
            }
            var focus = document.getElementById('focus');
            timeline.setSelection(selectedItem, {
                focus: focus.checked
            });
            break;
        case 39:
            selectedItem++;
            var focus = document.getElementById('focus');
            timeline.setSelection(selectedItem, {
                focus: focus.checked
            });
            break;
    }
};

</script>
</body>
</html>
